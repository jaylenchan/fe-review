/**
 * 匹配16进制颜色值
 */
// var string = '#ffbbad #Fc01DF #FFF #ffE'
/**
 * 1. 长度（横向模糊 - 量词）：16进制颜色值除了开头的#号，剩余长度可以是3位或者6位
 * 2. 单字符（纵向模糊 - 字符组）： 16进制颜色值的单个表示字符可以是a到f或者A到F或者0-9
 * 3. 多分支（支持多个子模式之一）：16进制颜色值表示可以是3位或者6位
 * 关键：注意#后边加一个括号包裹着两个子模式
 */
// var regex = /#([0-9a-zA-Z]{6}|[0-9a-zA-Z]{3})/g
// console.log(string.match(regex))

/**
 * 匹配时间
 */
/**
 * 1. 时间格式是：xx:xx，
 * -其中:左边第一个数字可以是0-2（从左往右数）
 * -- 多分支：当左边第一个数字是0的时候，第二个数字可以是0-9 （纵向模糊：字符组）
 * -- 多分支：当左边第一个数字是1的时候，第二个数字可以是0-9 （纵向模糊：字符组）
 * -- 多分支：当左边第二个数字是2的时候，第二个数字可以是0-3 （纵向模糊：字符组）
 * - 其中:右边第一个数字可以是0-5纵向模糊：字符组）（从左往右数），第二个数字可以是0-9 （纵向模糊：字符组）
 * 关键：注意要加上^$，表示只能是^$之间的字符串出现
 */
// var regex = /^([0-1][0-9]|2[0-3]):[0-5][0-9]$/
// console.log(regex.test('23:59'))
// console.log(regex.test('02:07'))

/**
 * 匹配日期
 */
/**
 * 1. 日期格式是xxxx-xx-xx
 * 2.第一个组合是0000-9999,使用字符组（纵向模糊匹配）+量词：4
 * 3.第二个组合是01-12，有12个月，表示月份
 * -- 如果第一个数字是0，则后边第二个数字可以是0-9 （多分支+字符组）
 * -- 如果第一个数字是1，则后边第二个数字可以是0-2 （多分支+字符组）
 * 4.第三个组合是01-31，有31天
 * -- 如果第二个组合代表的数字1，3，5，7，8，10，12， 则日期是31天（多分支+字符组）
 * -- 如果第二个组合代表的数字2，则日期是28天（多分支+字符组）
 * -- 如果第二个组合代表的数字4，6，9，11，则日期是30天（多分支+字符组）
 */

// var regex = /^[0-9]{4}-(0[1-9]|1[0-2])-(0[1-9]|[12][0-9]|3[01])$/
// console.log(regex.test('2022-01-01'))
// console.log(regex.test('2022-02-28'))

/**
 * 匹配id
 */
var string = '<div id="container" class="main"></div>'
/**
 * 1. id的格式为id="xxx"
 * 2. id="固定，右边是不定数量的单词，最后以"结尾
 * 不能写成/id=".+"/因为.本身就会直接匹配"，而且+会贪婪地一直匹配，当满足id="container的时候会继续匹配",
 * 最后一直匹配到id="container" class="main才停，于是结果就变成了
 * id="container" class="main"
 */
var regex = /id=".+?"/
console.log(string.match(regex)[0])
